<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bigtable on Floyd</title><link>https://hightower.space/tags/bigtable/</link><description>Recent content in Bigtable on Floyd</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 04 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://hightower.space/tags/bigtable/index.xml" rel="self" type="application/rss+xml"/><item><title>GCP Databases in a Nutshell</title><link>https://hightower.space/posts/gcp-pde-database-notes/</link><pubDate>Wed, 04 May 2022 00:00:00 +0000</pubDate><guid>https://hightower.space/posts/gcp-pde-database-notes/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>This post is part of a series of posts with notes as I&amp;rsquo;m studying for &lt;a href="https://cloud.google.com/certification/data-engineer">Google&amp;rsquo;s Professional Data Engineer Certification&lt;/a>.&lt;/p>
&lt;p>This particular post covers Cloud Composer in a nutshell.&lt;/p>
&lt;h2 id="disclaimer">Disclaimer&lt;/h2>
&lt;p>Please read &lt;a href="https://hightower.space/posts/gcp-notes-disclaimer/">this disclaimer&lt;/a>.&lt;/p>
&lt;h2 id="databases">Databases&lt;/h2>
&lt;h3 id="grouped-by-management-model">Grouped by Management Model&lt;/h3>
&lt;h4 id="managed-services">Managed Services&lt;/h4>
&lt;ul>
&lt;li>Cloud SQL&lt;/li>
&lt;li>Cloud Spanner&lt;/li>
&lt;li>Cloud Bigtable&lt;/li>
&lt;/ul>
&lt;h4 id="serverless-services">Serverless Services&lt;/h4>
&lt;ul>
&lt;li>Cloud Storage&lt;/li>
&lt;li>Firestore&lt;/li>
&lt;/ul>
&lt;h3 id="grouped-by-sizerelationality">Grouped by Size/Relationality&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Size of Data:&lt;/th>
&lt;th>Small&lt;/th>
&lt;th>Large&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Relational&lt;/td>
&lt;td>Cloud SQL&lt;/td>
&lt;td>Spanner*&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Non-Relational&lt;/td>
&lt;td>Firestore**&lt;/td>
&lt;td>Bigtable&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>* The option of using processing units as the means of calculating cost for Spanner makes it a better option for smaller solutions
** Firestore can handle large amounts of data too when provisioned correctly, but it &lt;em>can&lt;/em> be used for small applications where-as Bigtable really isn&amp;rsquo;t/shouldn&amp;rsquo;t be used for small use-cases&lt;/p>
&lt;h3 id="grouped-by-proprietary-ness">Grouped by Proprietary-ness&lt;/h3>
&lt;h4 id="google-proprietary">Google Proprietary&lt;/h4>
&lt;ul>
&lt;li>Spanner&lt;/li>
&lt;li>Firestore&lt;/li>
&lt;/ul>
&lt;h4 id="generic">Generic&lt;/h4>
&lt;p>(data in these systems could be easily transfered on-prem. or to a diff. cloud provider)&lt;/p>
&lt;ul>
&lt;li>SQL&lt;/li>
&lt;li>Bigtable (h-base compatible)&lt;/li>
&lt;/ul>
&lt;h3 id="transaction-support">Transaction Support&lt;/h3>
&lt;h4 id="acid-transactions">ACID Transactions&lt;/h4>
&lt;ul>
&lt;li>SQL&lt;/li>
&lt;li>Spanner&lt;/li>
&lt;li>Firestore&lt;/li>
&lt;/ul>
&lt;h4 id="row-level-transactions">Row-Level Transactions&lt;/h4>
&lt;ul>
&lt;li>Bigtable&lt;/li>
&lt;/ul></description></item><item><title>GCP PDE Recipies</title><link>https://hightower.space/posts/gcp-pde-recipies/</link><pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate><guid>https://hightower.space/posts/gcp-pde-recipies/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>This is a post in a series recording some notes as I&amp;rsquo;m studying for &lt;a href="https://cloud.google.com/certification/data-engineer">Google&amp;rsquo;s Professional Data Engineer Certification&lt;/a>.&lt;/p>
&lt;p>In this post, I provide some common recipies which are commonly used in Google Cloud.&lt;/p>
&lt;h2 id="disclaimer">Disclaimer&lt;/h2>
&lt;p>Please read &lt;a href="https://hightower.space/posts/gcp-notes-disclaimer/">this disclaimer&lt;/a>.&lt;/p>
&lt;h2 id="gcp-pde-recipies">GCP PDE Recipies&lt;/h2>
&lt;h3 id="the-classic">The Classic&lt;/h3>
&lt;p>Pub/Sub -&amp;gt; Dataflow -&amp;gt; BQ (batch inserts)&lt;/p>
&lt;p>Variations:&lt;/p>
&lt;ul>
&lt;li>Pub/Sub -&amp;gt; Dataflow -&amp;gt; BQ (streaming inserts)&lt;/li>
&lt;li>Pub/Sub -&amp;gt; Dataflow -&amp;gt; Bigtable -&amp;gt; BQ (querying Bigtable using federated query)
&lt;ul>
&lt;li>For use-cases which require analytics &lt;em>and&lt;/em> the low-latency afforded by Bigtable&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="uploading-data-to-google-cloud">Uploading Data to Google Cloud&lt;/h3>
&lt;ul>
&lt;li>gsutil
&lt;ul>
&lt;li>on-prem. (if practical based on network bandwidth and data size)&lt;/li>
&lt;li>Good for &amp;lt; 1TB&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Storage Transfer Service
&lt;ul>
&lt;li>From another cloud/on-prem. data center w/ sufficient bandwidth&lt;/li>
&lt;li>Good for &amp;gt; 1TB&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Transfer Appliance
&lt;ul>
&lt;li>Physical hard-drive you fill and send back&lt;/li>
&lt;li>For large amounts of data on-prem. and/or in a low-bandwidth location which makes gsutil impractical&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Bigtable in a Nutshell</title><link>https://hightower.space/posts/bigtable-notes/</link><pubDate>Fri, 29 Apr 2022 00:00:00 +0000</pubDate><guid>https://hightower.space/posts/bigtable-notes/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>This post is part of a series of posts with notes as I&amp;rsquo;m studying for &lt;a href="https://cloud.google.com/certification/data-engineer">Google&amp;rsquo;s Professional Data Engineer Certification&lt;/a>.&lt;/p>
&lt;p>This particular post covers Bigtable in a nutshell.&lt;/p>
&lt;h2 id="disclaimer">Disclaimer&lt;/h2>
&lt;p>Please read &lt;a href="https://hightower.space/posts/gcp-notes-disclaimer/">this disclaimer&lt;/a>.&lt;/p>
&lt;h2 id="bigtable">Bigtable&lt;/h2>
&lt;ul>
&lt;li>h-base compliant&lt;/li>
&lt;li>Requires configuration and management of nodes&lt;/li>
&lt;li>Designing/choosing a good row-key (index) is &lt;em>critical&lt;/em> to avoiding hot-spots (where some nodes have significantly more to process than others)
&lt;ul>
&lt;li>Rows are sorted lexigraphically by row-key&lt;/li>
&lt;li>Generally a long, compound key (e.g. &lt;code>{id}#{source}#{timestamp}&lt;/code>)&lt;/li>
&lt;li>Order of a compound key matters!&lt;/li>
&lt;li>&lt;a href="https://cloud.google.com/bigtable/docs/schema-design">Principles&lt;/a>:
&lt;ul>
&lt;li>Don&amp;rsquo;t put timestamps first&lt;/li>
&lt;li>Don&amp;rsquo;t hash values (keep values human-readable as row-keys are lexigraphically sorted)&lt;/li>
&lt;li>Pad integers (and sometimes timestamps) so all row keys will be the same length and be reasonably sorted lexigraphically&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>I&amp;rsquo;ve observed that keys often follow one of the following formats:
&lt;ul>
&lt;li>&lt;code>{large-component}#{small-component}#{timestamp}&lt;/code>&lt;/li>
&lt;li>&lt;code>{large-component}#{small-component}#{reverse-timestamp}&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Supports &lt;a href="https://cloud.google.com/bigtable/docs/schema-design#column-families">column families&lt;/a>&lt;/li>
&lt;li>Performance increase linearly w/ nodes&lt;/li>
&lt;/ul></description></item></channel></rss>