<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming on Floyd Hightower</title><link>https://hightower.space/tags/programming/</link><description>Recent content in Programming on Floyd Hightower</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 26 Feb 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://hightower.space/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Simple, Non-blocking, Push/Pull Example with ZeroMQ</title><link>https://hightower.space/posts/zeromq-push-pull/</link><pubDate>Tue, 26 Feb 2019 00:00:00 +0000</pubDate><guid>https://hightower.space/posts/zeromq-push-pull/</guid><description>Intro While working on TotalEmail, I ran across a situation in which we needed to make a non-blocking request (a request where the client makes the request without waiting or expecting a response). To accomplish this, I started looking into ZeroMQ. ZeroMQ is amazing! It is very well-structured and generalizes the problem of messaging between machines very effectively.
While the ZeroMQ documentation is extensive, it is easy (at least for me) to get lost in the docs and forget the simplicity and elegance of ZeroMQ.</description></item><item><title>HTML-to-JSON Conversion Library</title><link>https://hightower.space/posts/html-to-json/</link><pubDate>Sun, 03 Feb 2019 00:00:00 +0000</pubDate><guid>https://hightower.space/posts/html-to-json/</guid><description>HTML-to-JSON Library I have a project here to convert HTML to JSON. You can find installation instructions here: https://gitlab.com/fhightower/html-to-json#installation.
The library can convert any/all html to json such that this:
&amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Floyd Hightower&amp;#39;s Projects&amp;lt;/title&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;description&amp;#34; content=&amp;#34;Floyd Hightower&amp;amp;#39;s Projects&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;keywords&amp;#34; content=&amp;#34;projects,fhightower,Floyd,Hightower&amp;#34;&amp;gt; &amp;lt;/head&amp;gt; becomes:
{ &amp;#34;head&amp;#34;: [ { &amp;#34;title&amp;#34;: [ { &amp;#34;value&amp;#34;: &amp;#34;Floyd Hightower\&amp;#39;s Projects&amp;#34; }], &amp;#34;meta&amp;#34;: [ { &amp;#34;attributes&amp;#34;: { &amp;#34;charset&amp;#34;: &amp;#34;UTF-8&amp;#34; } }, { &amp;#34;attributes&amp;#34;: { &amp;#34;name&amp;#34;: &amp;#34;description&amp;#34;, &amp;#34;content&amp;#34;: &amp;#34;Floyd Hightower\&amp;#39;s Projects&amp;#34; } }, { &amp;#34;attributes&amp;#34;: { &amp;#34;name&amp;#34;: &amp;#34;keywords&amp;#34;, &amp;#34;content&amp;#34;: &amp;#34;projects,fhightower,Floyd,Hightower&amp;#34; } }] }] } And you can tell it to only convert html tables in which case it will convert tables and use the table headings as the keys for the resulting json (this is described in depth here).</description></item><item><title>GUI vs. UI</title><link>https://hightower.space/posts/gui-vs-ui/</link><pubDate>Wed, 05 Sep 2018 00:00:00 +0000</pubDate><guid>https://hightower.space/posts/gui-vs-ui/</guid><description>I believe words are important.1I recently caught myself saying something I consider dangerous for the way we think about computing and programming. I found my self saying &amp;ldquo;UI&amp;rdquo; (which is short for &amp;ldquo;User Interface&amp;rdquo;) to describe a &amp;ldquo;GUI&amp;rdquo; (a &amp;ldquo;Graphical User Interface&amp;rdquo;). UI is a broad category which encompasses multiple ways a user may interface with a system. A GUI is a specific instance of UI which relies on &amp;lsquo;visual metaphors&amp;rsquo; to communicate information to a user and allow the user to interact with the underlying system (the most ubiquitous example of a GUI is a website).</description></item><item><title>A Definitive Guide for Ignoring Sublime Linter Errors</title><link>https://hightower.space/posts/sublime-linter-ignore-guide/</link><pubDate>Wed, 15 Aug 2018 00:00:00 +0000</pubDate><guid>https://hightower.space/posts/sublime-linter-ignore-guide/</guid><description>I found it very difficult to ignore sublime linter errors in Sublime Text, so this guide shows how to ignore these errors easily. If you have feedback, updates, or additions, please let me know (or raise an issue).
Ignoring Linter Errors Example To ignore linter errors, open Sublime Text and navigate to Preferences &amp;gt; Package Settings &amp;gt; SublimeLinter &amp;gt; Settings. This will open a Sublime Text window with the default sublime linter settings on the left and your user settings on the right.</description></item><item><title>JavaScript Puzzles: How Well do you Know Javascript?</title><link>https://hightower.space/posts/javascript-puzzles/</link><pubDate>Thu, 05 Jul 2018 00:00:00 +0000</pubDate><guid>https://hightower.space/posts/javascript-puzzles/</guid><description>Here are a couple of fun Javascript puzzles I&amp;rsquo;ve created/found to demonstrate important Javascript gotchas. There are answers/explanations near the bottom of the page.
Puzzles Variable Scoping As I&amp;rsquo;m learning Typescript, I was reading through the docs and ran across a fascinating little code snippet demonstrating variable scoping gotchas in javascript. The question was:
What is the output of the code below?
for (var i = 0; i &amp;lt; 10; i++) { setTimeout(function() { console.</description></item></channel></rss>