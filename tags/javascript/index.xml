<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Javascript on Floyd</title><link>https://hightower.space/tags/javascript/</link><description>Recent content in Javascript on Floyd</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 05 Jul 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://hightower.space/tags/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>JavaScript Puzzles: How Well do you Know Javascript?</title><link>https://hightower.space/posts/javascript-puzzles/</link><pubDate>Thu, 05 Jul 2018 00:00:00 +0000</pubDate><guid>https://hightower.space/posts/javascript-puzzles/</guid><description>&lt;p>Here are a couple of fun Javascript puzzles I&amp;rsquo;ve created/found to demonstrate important Javascript gotchas. There are answers/explanations near the bottom of the page.&lt;/p>
&lt;h2 id="puzzles">Puzzles&lt;/h2>
&lt;h3 id="variable-scoping">Variable Scoping&lt;/h3>
&lt;p>As I&amp;rsquo;m learning &lt;a href="https://www.typescriptlang.org/index.html">Typescript&lt;/a>, I was reading through the docs and ran across a fascinating little code snippet demonstrating &lt;a href="https://www.typescriptlang.org/docs/handbook/variable-declarations.html#variable-capturing-quirks">variable scoping gotchas&lt;/a> in javascript. The question was:&lt;/p>
&lt;p>What is the output of the code below?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">for&lt;/span> (&lt;span style="color:#815ba4">var&lt;/span> &lt;span style="color:#06b6ef">i&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#f99b15">0&lt;/span>; &lt;span style="color:#06b6ef">i&lt;/span> &lt;span style="color:#5bc4bf">&amp;lt;&lt;/span> &lt;span style="color:#f99b15">10&lt;/span>; &lt;span style="color:#06b6ef">i&lt;/span>&lt;span style="color:#5bc4bf">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#06b6ef">setTimeout&lt;/span>(&lt;span style="color:#815ba4">function&lt;/span>() { &lt;span style="color:#06b6ef">console&lt;/span>.&lt;span style="color:#06b6ef">log&lt;/span>(&lt;span style="color:#06b6ef">i&lt;/span>); }, &lt;span style="color:#f99b15">100&lt;/span> &lt;span style="color:#5bc4bf">*&lt;/span> &lt;span style="color:#06b6ef">i&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Think about it and check your &lt;a href="#variable-scoping-answer">answer&lt;/a> below.&lt;/em>&lt;/p>
&lt;h3 id="indexing-an-objects-properties">Indexing an Object&amp;rsquo;s Properties&lt;/h3>
&lt;p>I came up with this puzzle to demonstrate the difference between accessing the value of an Object using a dot versus using brackets (e.g. &lt;code>data[&amp;quot;test&amp;quot;]&lt;/code> vs. &lt;code>data.test&lt;/code>).&lt;/p>
&lt;p>What is the output of the code block below?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">var&lt;/span> &lt;span style="color:#06b6ef">data&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f99b15">0&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span> &lt;span style="color:#48b685">&amp;#34;zero&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#06b6ef">i&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span> &lt;span style="color:#48b685">&amp;#34;eye&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">for&lt;/span> (&lt;span style="color:#815ba4">var&lt;/span> &lt;span style="color:#06b6ef">i&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#f99b15">0&lt;/span>; &lt;span style="color:#06b6ef">i&lt;/span> &lt;span style="color:#5bc4bf">&amp;lt;&lt;/span> &lt;span style="color:#f99b15">1&lt;/span>; &lt;span style="color:#06b6ef">i&lt;/span>&lt;span style="color:#5bc4bf">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#06b6ef">console&lt;/span>.&lt;span style="color:#06b6ef">log&lt;/span>(&lt;span style="color:#06b6ef">data&lt;/span>[&lt;span style="color:#06b6ef">i&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#06b6ef">console&lt;/span>.&lt;span style="color:#06b6ef">log&lt;/span>(&lt;span style="color:#06b6ef">data&lt;/span>.&lt;span style="color:#06b6ef">i&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Think about it and check your &lt;a href="#indexing-an-object-s-properties-answer">answer&lt;/a> below.&lt;/em>&lt;/p>
&lt;hr>
&lt;h2 id="answers">Answers&lt;/h2>
&lt;h3 id="variable-scoping-answer">Variable Scoping Answer&lt;/h3>
&lt;p>Most people expect, as did I, that this code would output:&lt;/p>
&lt;pre tabindex="0">&lt;code>0
1
2
3
4
5
6
7
8
9
&lt;/code>&lt;/pre>&lt;p>when in fact, the output is:&lt;/p>
&lt;pre tabindex="0">&lt;code>10
10
10
10
10
10
10
10
10
10
&lt;/code>&lt;/pre>&lt;p>This occurs because the &lt;code>setTimeout&lt;/code> function will not run until the for loop has finished. By the time the for loop has finished, the value of variable &lt;code>i&lt;/code> is 10. Each of the functions called by the &lt;code>setTimeout&lt;/code> function is looking at the same &lt;code>i&lt;/code> from the same scope, so they all log &lt;code>10&lt;/code>.&lt;/p>
&lt;h3 id="indexing-an-objects-properties-answer">Indexing an Object&amp;rsquo;s Properties Answer&lt;/h3>
&lt;p>The output of this code puzzle is:&lt;/p>
&lt;pre tabindex="0">&lt;code>zero
eye
&lt;/code>&lt;/pre>&lt;p>This occurs because the first, and only, time through the for loop the value of &lt;code>i&lt;/code> is 0 (zero). When I call &lt;code>console.log(data[i]);&lt;/code>, javascript starts inside the brackets by getting the value of &lt;code>i&lt;/code> (which is 0). Thus, the first logging is equivalent to saying &lt;code>console.log(data.0);&lt;/code> and outputs &amp;lsquo;zero&amp;rsquo;.&lt;/p>
&lt;p>In the second logging (&lt;code>console.log(data.i);&lt;/code>), javascript does not get the value of &lt;code>i&lt;/code>, but instead treats &amp;ldquo;i&amp;rdquo; as a literal key. Thus, this is equivalent to saying &lt;code>console.log(data[&amp;quot;i&amp;quot;]);&lt;/code> which outputs &amp;rsquo;eye'.&lt;/p>
&lt;p>Give these puzzles to your friends and enjoy as they over-think them and second-guess themselves!&lt;/p></description></item></channel></rss>